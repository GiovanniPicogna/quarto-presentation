---
title: "Planets 1"
title-block-banner: true
author:
  - name: Giovanni Picogna
    id: gp
    orcid: 0000-0003-3754-1639
    email: giovanni.picogna@pm.me
    affiliation: 
      - name: USM - LMU
        city: Munich
        state: Germany
        url: www.usm.uni-muenchen.de 
license: "CC BY"
copyright: 
  holder: Giovanni Picogna
  year: 2023
date: 11/07/2023
format:
  html:
    code-fold: true
execute:
  echo: true
jupyter: python3
---

# Direct Imaging

## Exercise 1

- Plot the emitted luminosity through the surface of the Sun, Jupiter and Earth as a function of wavelength

  > Planck's law describes the spectral density of electromagnetic radiation emitted by a black body.

  > A black body absorbs all incident electromagnetic radiation, regardless of frequency or angle of incidence. The radiation emitted by a black body in thermal equilibrium with its environment is called black-body radiation.

  > The Planck function describes the the shape of the black body spectrum

  $$B_\lambda (T) = \frac{2 h c^2}{\lambda^5}\frac{1}{e^{\frac{h c}{\lambda  k_B T}} - 1}$$

  ```{python}
  from astropy import units as u
  import constants as c
  import numpy as np
  np.seterr(over='ignore')
  def Planck_function(lam, T):
    """Calculate the Planck function at a given wavelength and temperature."""
    B = ((2.*c.h*c.c**2/(lam*u.angstrom)**5)/(np.exp((c.h*c.c)/(lam*u.angstrom*c.k_B*T))-1.))
    return B.cgs
  ```

  > If we integrate the Planck function over the whole surface area of the star, and over all solid angle of space, we will get the monochromatic luminosity:

  $$L_\lambda d\lambda = \int_{d\Omega} \int_A B_\lambda d\lambda dA d\Omega = 4\pi^2 R^2 B_\lambda d\lambda$$

  ```{python}
  def Luminosity_mono(lam, T, R):
    """Calculate the monocromatic luminosity of a black body with given Temperature and Radius."""
    A = np.pi * R**2
    Omega = 4. * np.pi
    lum_mono = Planck_function(lam, T) * Omega * A
    return lum_mono
  ```

  > If we now integrate over all wavelengths we get the total luminosity of the star

  $$L = \int_0^\infty L_\lambda d\lambda = 4 \pi R^2 \sigma T^4$$

  ```{python}
  def Luminosity(T, R):
    """Calculate the total luminosity of a black body with given Temperature and Radius."""
    L = 4. * np.pi * R**2 * c.sigma * T**4
    return L
  ```

  > The emitted luminosity through the surface of the Sun, Jupiter and Earth as a function of wavelength than will be:

  ```{python}
  import matplotlib.pyplot as plt

  lambda_array = np.logspace(3, 7, 1000)

  plt.plot(lambda_array, Luminosity_mono(lambda_array, c.T_Sun, c.R_Sun), label='Sun')
  plt.plot(lambda_array, Luminosity_mono(lambda_array, c.T_Jupiter, c.R_Jupiter), label='Jupiter')
  plt.plot(lambda_array, Luminosity_mono(lambda_array, c.T_Earth, c.R_Earth), label='Earth')

  plt.xlim(1e3, 1e7)
  plt.ylim(1e16, 1e35)
  plt.xscale('log')
  plt.yscale('log')
  plt.xlabel('wavelength \ $\AA$')
  plt.ylabel('spectral luminosity \ Ba m$^2$ s$^{-1}$')
  plt.legend(loc=0)
  ```

## Exercise 2

- Calculate the brightness contrast of Jupiter and Sun in the spectral region where the Rayleigh-Jeans approximation holds for both bodies

  > The Rayleigh-Jeans law, which is valid for large wavelengths or small frequencies (ultraviolet catastrophe), is given by:
    $$B_\lambda = \frac{2 c k_B T}{\lambda^4}$$

  > The brigthness contrast between Jupiter and the Sun will then be in this approximation:
    $$f = \frac{4\pi R_{Jupiter}^2 B_\lambda(T_{Jupiter})}{4\pi R_{Sun}^2 B_\lambda(T_{Sun})} = \left(\frac{R_{Jupiter}}{R_{Sun}}\right)^2\frac{T_{Jupiter}}{T_{Sun}}$$

  ```{python}
  f = c.R_Jupiter**2/c.R_Sun**2 * c.T_Jupiter/c.T_Sun
  print("L_Jup / L_Sun = {:.3e}".format(f))
  ```

  > The brightness contrast between Jupiter and the Sun is quite favourable, and this happens in the infra-red band where the Rayleigh-Jeans approximation holds true.

## Exercise 3 

- Calculate the brightness contrast of Jupiter and the Sun in the visual spectral region

  > In the visual spectral region the dominant component in the Jupiter spectrum is the reflected light from the Sun

  ```{python}
  def luminosity_reflected_mono(lam, T_Sun, R_Sun, semi_major, R_plan, albedo):
    lum = Luminosity_mono(lam, T_Sun, R_Sun) / (4.*np.pi*semi_major**2) * np.pi*R_plan**2  * albedo
    return lum
  ```

  > as it can be seen from comparing the two components:
  ```{python}
  import matplotlib.pyplot as plt
  fig, ax = plt.subplots()
  plt.plot(lambda_array, Luminosity_mono(lambda_array, c.T_Sun, c.R_Sun), label='Sun')
  plt.plot(lambda_array, Luminosity_mono(lambda_array, c.T_Jupiter, c.R_Jupiter), ls =':', color='black', label='Jupiter thermal')
  plt.plot(lambda_array, luminosity_reflected_mono(lambda_array, c.T_Sun, c.R_Sun, c.a_Jupiter, c.R_Jupiter, c.albedo_vis_Jupiter), ls='--', color='black', label='Jupiter reflected')

  ax.axvspan(3800, 7500, alpha=0.5, color='green')

  plt.ylim(1e16, 1e35)
  plt.xscale('log')
  plt.yscale('log')
  plt.xlabel('wavelength \ $\AA$')
  plt.ylabel('spectral luminosity \ Ba m$^2$ s$^{-1}$')
  plt.legend(loc=0)
  ```

  > the brightness contrast between Jupiter and the Sun in the visual spectral region is then

  ```{python}
  # visual spectral region
  lam = np.linspace(380, 750, 1000) * u.nanometer
  contrast = luminosity_reflected_mono(lambda_array, c.T_Sun, c.R_Sun, c.a_Jupiter, c.R_Jupiter, c.albedo_vis_Jupiter) / Luminosity_mono(lambda_array, c.T_Sun, c.R_Sun)
  #contrast = ((np.pi*c.R_Jupiter**2)/(4.*np.pi*c.a_Jupiter**2)).to(u.dimensionless_unscaled) * c.albedo_vis_Jupiter
  print("contrast = {:.3e}".format(np.mean(contrast)))
  ```

## Exercise 4

- What apparent visual magnitude would Jupiter have as seen from our neighbouring star Proxima Centauri? What maximum angular distance could be observed?

  > the Sun, with a visual absolute magnitude of $M_{Sun} = 4.83$ would be seen from Proxima Centauri ($d=1.31 \ pc$) with an apparent visual magnitude of
  $$m_{Sun} = M_{Sun}+5\log_{10}\left(\frac{1.31 \ pc}{10 \ pc}\right)$$
  ```{python}
  d_Proxima = 1.31
  m_Sun = c.M_vis_Sun + 5.*np.log10(d_Proxima/10.)
  print("m_Sun = {:.3f}".format(m_Sun))
  ```

  > given the contrast in flux between the Sun and Jupiter we can calculate a difference in magnitude:
  $$\Delta m = -2.5 \log_{10}\left(\frac{L_{Jup}}{L_{Sun}}\right)$$
  $$m_{Jup} = m_{Sun} - 2.5\log_{10}\left(\frac{L_{Jup}}{L_{Sun}}\right)$$

  ```{python}
  m_Jup = m_Sun - 2.5*np.log10(np.mean(contrast))
  print("m_Jup = {:.3f}".format(m_Jup))
  ```

  > At 1.31 pc the angular separation of Jupiter from the Sun would be
  $$\theta = \frac{5.2\ \mathrm{au}}{1.31\ \mathrm{pc}}$$

  ```{python}
  theta = (5.2/1.31)
  print("theta_Jup = {:.3f} arcsec".format(theta))
  ```

## Exercise 5

- Plot the spectral energy distribution of the reflected Sun light on Jupiter into the plot of exercise 1

  ```{python}
  plt.plot(lambda_array, Luminosity_mono(lambda_array, c.T_Sun, c.R_Sun), label='Sun')
  plt.plot(lambda_array, Luminosity_mono(lambda_array, c.T_Jupiter, c.R_Jupiter), label='Jupiter thermal')
  plt.plot(lambda_array, luminosity_reflected_mono(lambda_array, c.T_Sun, c.R_Sun, c.a_Jupiter, c.R_Jupiter, c.albedo_vis_Jupiter), ls='--', color='orange', label='Jupiter reflected')
  plt.plot(lambda_array, Luminosity_mono(lambda_array, c.T_Earth, c.R_Earth), label='Earth')

  plt.xlim(1e3, 1e7)
  plt.ylim(1e16, 1e35)
  plt.xscale('log')
  plt.yscale('log')
  plt.xlabel('wavelength \ $\AA$')
  plt.ylabel('spectral luminosity \ Ba m$^2$ s$^{-1}$')
  plt.legend(loc=0)
  ```

- Calculate the ratio of reflected light and thermal emission of Jupiter at 500 nm

  ```{python}
  lambda_val = ((500. * u.nanometer).to(u.AA)).value
  Ljup    = Luminosity_mono(lambda_val, c.T_Jupiter, c.R_Jupiter) 
  Refljup = luminosity_reflected_mono(lambda_val, c.T_Sun, c.R_Sun, c.a_Jupiter, c.R_Jupiter, c.albedo_vis_Jupiter)

  print("Refljup/Ljup at 500 nm = {:.3e}".format(Refljup/Ljup))
  ```

- From which wavelength on is the thermal emission dominant?

  ```{python}
  therm_jupiter = Luminosity_mono(lambda_array, c.T_Jupiter, c.R_Jupiter) 
  refl_jupiter  = luminosity_reflected_mono(lambda_array, c.T_Sun, c.R_Sun, c.a_Jupiter, c.R_Jupiter, c.albedo_vis_Jupiter)

  min_lambda = lambda_array[np.where(therm_jupiter>refl_jupiter)][0]
  print("Jupiter thermal emission is dominant from {:.3f}".format((min_lambda*u.AA).to(u.nm)))
  ```

## Exercise 6

- In which spectral range is the Earth brighter than Jupiter?

  ```{python}
  plt.figure(figsize=(7,5),facecolor='w')
  refl_earth = Luminosity_mono(lambda_array, c.T_Sun, c.R_Sun) / (4.*np.pi*c.au**2) * np.pi*c.R_Earth**2  * c.albedo_vis_Earth
  earth = refl_earth + Luminosity_mono(lambda_array, c.T_Earth, c.R_Earth)
  refl_jupiter = Luminosity_mono(lambda_array, c.T_Sun, c.R_Sun) / (4.*np.pi*c.a_Jupiter**2) * np.pi*c.R_Jupiter**2  * c.albedo_vis_Jupiter
  jupiter = refl_jupiter + Luminosity_mono(lambda_array, c.T_Jupiter, c.R_Jupiter)
  plt.plot(lambda_array, earth, label='Earth')
  plt.plot(lambda_array, jupiter, label='Jupiter')
  
  min_lambda = lambda_array[np.where(earth>jupiter)][0]
  max_lambda = lambda_array[np.where(earth>jupiter)][-1]

  plt.xlim(1e3, 1e7)
  plt.ylim(1e16, 1e25)
  plt.xscale('log')
  plt.yscale('log')
  plt.legend(loc=0)
  plt.xlabel('wavelength \ $\AA$')
  plt.ylabel('spectral luminosity \ Ba m$^2$ s$^{-1}$')

  print("The Earth is brighter than Jupiter from {:.3f} to {:.3f}".format((min_lambda*u.AA).to(u.nm), (max_lambda*u.AA).to(u.nm)))
  ```

# Radial velocity

## Exercise 7

- What is the maximum radial velocity amplitude of the Sun caused by Mercury, Earth and Jupiter that an observer outside the Solar System can measure?

  > The maximum radial velocity amplitude of the Sun caused by Mercury, Earth and Jupiter would be seen by an observer seeing the Solar system face on ($i=0$) and would be:
  $$v_{Sun, Planet} = \left(\frac{2\pi G}{P}\right)^{1/3} \cdot \frac{M_{Planet}}{M_{Star}^{2/3}}$$

  ```{python}
  def v_radial(a, e, i, m_star, m_planet):
    # Calculate the radial velocity of a star due to a planet
    P = np.sqrt(4.*np.pi**2*a**3/(c.G*(m_star+m_planet)))
    v = (2*np.pi*c.G/P)**(1/3) * m_planet/m_star**(2/3) * np.sin(i) * (1-e**2)**(-1/2)
    return v.to(u.m/u.s)
  ```

  ```{python}
  print("Maximum radial velocity from Mercury: {:.3f}".format(v_radial(c.a_Mercury, 0.0, 90.*u.deg, c.M_Sun, c.M_Mercury).to(u.cm/u.s)))
  print("Maximum radial velocity from Earth: {:.3f}".format(v_radial(c.au, 0.0, 90.*u.deg, c.M_Sun, c.M_Earth).to(u.cm/u.s)))
  print("Maximum radial velocity from Jupiter: {:.3f}".format(v_radial(c.a_Jupiter, 0.0, 90.*u.deg, c.M_Sun, c.M_Jupiter)))
  ```

## Exercise 8

- Plot the maximum radial velocity amplitude of a G2V star with a planet of mass 0.5, 1 and 2 M_Jupiter as a function of semi-major axis (range 0.1-5 au)

  ```{python}
  semimajor = np.linspace(0.1, 5, 1000)
  plt.plot(semimajor, v_radial(semimajor*u.au, 0.0, 90.*u.deg, 1.*u.M_sun, 0.5*u.M_jup), label='0.5 Jupiter')
  plt.plot(semimajor, v_radial(semimajor*u.au, 0.0, 90.*u.deg, 1.*u.M_sun, 1.*u.M_jup), label='1 Jupiter')
  plt.plot(semimajor, v_radial(semimajor*u.au, 0.0, 90.*u.deg, 1.*u.M_sun, 2.*u.M_jup), label='2 Jupiter')
  plt.legend()
  plt.ylabel('Radial velocity (m/s)')
  plt.xlabel('Semimajor axis (AU)')
  plt.xlim(0.1, 5.)
  ```

## Exercise 9

- Consider randomly distributed inclination angles $i$. The observed inclination angles of extrasolar planets have a $\sin i$ probability distribution function over the interval $[0, \pi/2]$

  ```{python}
  from scipy import integrate
  inc = lambda i : i*np.sin(i)

  mean_inc = integrate.quad(inc, 0, np.pi/2., full_output=1)[0]

  print('<inc> = {:.3f} deg'.format(mean_inc/np.pi*180.))

  print('M_pl/M_min = {:.3f}'.format(1./np.sin(mean_inc)))
  ```

## Exercise 10

- What is the probability that a planet candidate with minimum mass 2, 4, 6, 8 and 10 M_Jupiter is actually not a planet but a Brown Dwarf? What is the chance that it is a main sequence star?

  > The mass limit for a Brown Dwarf is $13 M_{Jup}$ while for a main sequence star it is $80 M_{Jup}$
  ```{python}
  min_mass = np.array([2., 4., 6., 8., 10.])
  mass_thresh_BD = 13.
  mass_thresh_MS = 80.
  ```
  > Given that
  $$M_{threshold} \leq M_{pl} = \frac{M_{pl,measured}}{\sin i}$$
  $$\sin i \leq \frac{M_{pl,measured}}{M_{threshold}}$$
  > we can derive the minimum inclination for a detection of a brown dwarf and a main sequence star
  ```{python}
  i_BD = np.arcsin(min_mass/mass_thresh_BD)
  i_MS = np.arcsin(min_mass/mass_thresh_MS)
  ```
  > and derive the probability distribution function for a $\sin i$ distribution of angles
  ```{python}
  from scipy.integrate import quad

  prob_i = lambda x: np.sin(x)

  for i in range(len(min_mass)) :
    print('---------------------------------------')
    print("Mmin = {:.1f} M_J".format(min_mass[i]))
    print("i_BD = {:.2f} deg".format(i_BD[i]/np.pi*180.))
    print("i_MS = {:.2f} deg".format(i_MS[i]/np.pi*180.))
    P_MS   = quad(prob_i, 0., i_MS[i])[0]   
    P_BD   = quad(prob_i, i_MS[i], i_BD[i])[0]   
    P_BDMS = quad(prob_i, 0., i_BD[i])[0]   
    P_PL   = quad(prob_i, i_BD[i], np.pi/2.)[0] 
    print("P_MS = {:.2f} %".format(P_MS*100.,'%'))
    print("P_BD = {:.2f} %".format(P_BD*100.,'%'))
    print("P_PL = {:.2f} %".format(P_PL*100.,'%'))
    print("P_BD+P_MS = {:.2f} %".format(P_BDMS*100.,'%'))
  ```

# Transit method

## Exercise 11

- List the transit depth, maximum transit duration, transit probability and minimum inclination for Venus, Earth and Jupiter

  ```{python}
  print("The transit depth of Venus is: ", (c.R_Venus/c.R_Sun)**2)
  print("The transit depth of Earth is: ", (c.R_Earth/c.R_Sun)**2)
  print("The transit depth of Jupiter is: ", (c.R_Jupiter/c.R_Sun)**2)
  print("The maximum transit duration of Venus is: ", (np.sqrt((4.*c.a_Venus)/(c.G*c.M_Sun))*(c.R_Sun+c.R_Venus)).to(u.day))
  print("The maximum transit duration of Earth is: ", (np.sqrt((4.*c.au)/(c.G*c.M_Sun))*(c.R_Sun+c.R_Earth)).to(u.day))
  print("The maximum transit duration of Jupiter is: ", (np.sqrt((4.*c.a_Jupiter)/(c.G*c.M_Sun))*(c.R_Sun+c.R_Jupiter)).to(u.day))
  print("The transit probability of Venus is: ", (c.R_Sun/c.a_Venus).to(u.dimensionless_unscaled)*100., "%")
  print("The transit probability of Earth is: ", (c.R_Sun/c.au).to(u.dimensionless_unscaled)*100., "%")
  print("The transit probability of Jupiter is: ", (c.R_Sun/c.a_Jupiter).to(u.dimensionless_unscaled)*100., "%")
  print("The minimum inclination for Venus is: ", np.arccos(c.R_Sun/c.a_Venus).to(u.deg))
  print("The minimum inclination for Earth is: ", np.arccos(c.R_Sun/c.au).to(u.deg))
  print("The minimum inclination for Jupiter is: ", np.arccos(c.R_Sun/c.a_Jupiter).to(u.deg))
  ```

## Exercise 12

- Plot the transiting probability for a G2V-star (Sun-like) as a function of the semi-major axis, and compare with E8.

  ```{python}
  def transit_probability(r_star, a_planet):
    return (r_star/a_planet).to(u.dimensionless_unscaled)*100.
  ```

  ```{python}
  semimajor = np.linspace(0.1, 5, 1000)
  plt.plot(semimajor, transit_probability(c.R_Sun, semimajor*u.au), label='1 R_sun')
  plt.ylabel('transit probability / %')
  plt.xlabel('Semimajor axis (AU)')
  ```

# Overview of all detected planets

## Exercise 13

- Create a table with the up-to-date number of discoveries for the different detection methods

  ```{python}
  import pandas as pd
  observations = pd.read_table("data/table.dat", names=["method", "detected as October 2023", "M_planet < 13 M_Jup"])
  observations
  ```
## Exercise 14

- Make a histogram of masses and periods for all planets found with the radial velocity and the transit method

  ```{python}
  import seaborn as sns
  data_raw = pd.read_csv("data/transit_radvel.csv")
  plt.title('period hystogram')
  sns.histplot(data_raw, x="orbital_period", bins=20, hue="detection_type", log_scale=True, kde=True, stat="density")
  ```

  ```{python}
  plt.title('mass hystogram')
  sns.histplot(data_raw, x="mass", binwidth=0.5, hue="detection_type", log_scale=True, kde=True, stat="density")
  ```

## Exercise 15

- Make a correlation diagram of semi-major axis vs. eccentricity for all planets found with the radial velocity and transit method

  ```{python}
  data = pd.DataFrame(
    {
      "a": data_raw["semi_major_axis"],
      "e": data_raw["eccentricity"],
      "i": data_raw["inclination"],
      "name": data_raw["name"],
      "method": data_raw["detection_type"]
    }
  )
  data = data.drop(data[data["e"] == 0].index)
  solar_data = pd.read_table("data/solarsystem.dat", names=["a", "e", "name"])
  solar_system = pd.DataFrame(
    {
      "a": solar_data["a"],
      "e": solar_data["e"],
      "name": solar_data["name"],
      "method": "Solar System"
    }
  )
  data = pd.concat([data, solar_system], axis=0).reset_index()
  ```

  ```{python}
  g = sns.jointplot(
    data=data,
    x="a", y="e",
    hue="method",
    marginal_kws=dict(fill=True, log_scale=True, color='r')
  )
  plt.xlim(1e-2,1e2)
  plt.ylim(1e-3,1)
  plt.xlabel('semi-major axis / au')
  plt.ylabel('eccentricity')
  ```